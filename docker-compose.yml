version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "-w", "2", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - my-network

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - my-network

  program-ingestion-service:
    build:
      context: ./program-workflow/program-ingestion-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - my-network

  program-transformation-service:
    build:
      context: ./program-workflow/program-transformation-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      - my-network

  program-genre-mapping-service:
    build:
      context: ./program-workflow/program-genre-mapping-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    networks:
      - my-network

  program-advisory-mapping-service:
    build:
      context: ./program-workflow/program-advisory-mapping-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8084:8084"
    networks:
      - my-network

  program-credit-mapping-service:
    build:
      context: ./program-workflow/program-credit-mapping-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8085"
    networks:
      - my-network

  program-id-mapping-service:
    build:
      context: ./program-workflow/program-id-mapping-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8086:8086"
    networks:
      - my-network

  program-storage-service:
    build:
      context: ./program-workflow/program-storage-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8087:8087"
    networks:
      - my-network

  check-and-publish-program-service:
    build:
      context: ./program-workflow/check-and-publish-program-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8089:8089"
    networks:
      - my-network

  api-service:
    build:
      context: ./program-workflow/api-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8090"
    networks:
      - my-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    hostname: kafka-ui
    container_name: kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8088:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: kafkacluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: 'kafka:29092,localhost:29092,localhost:9092,kafka:9092'
    networks:
      - my-network

  ui-backend-service:
    build:
      context: ./program-workflow/ui-backend-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8091:8091"
    networks:
      - my-network    

networks:
  my-network:
    external: true
